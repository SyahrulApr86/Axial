services:
  # PostgreSQL Service
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-portfolio}
      POSTGRES_USER: ${POSTGRES_USER:-portfolio_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-portfolio_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-portfolio_user} -d ${POSTGRES_DB:-portfolio}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js App Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: portfolio_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-portfolio_user}:${POSTGRES_PASSWORD:-portfolio_password}@postgres:5432/${POSTGRES_DB:-portfolio}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@portfolio.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - portfolio_network
    volumes:
      - ./public:/app/public
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        npx prisma db push &&
        echo 'Database schema applied' &&
        node scripts/create-admin.js &&
        echo 'Admin user created' &&
        npm start
      "

volumes:
  postgres_data:
    driver: local

networks:
  portfolio_network:
    driver: bridge